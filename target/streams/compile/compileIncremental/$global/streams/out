[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(/home/andres/IdeaProjects/introduccionscala052018/src/main/scala/example/Monads.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(example.Monads, example.Monads.Monad)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(example.Monads, example.Monads.Monad)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(/home/andres/IdeaProjects/introduccionscala052018/src/main/scala/example/Monads.scala)[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 1 Scala source to /home/andres/IdeaProjects/introduccionscala052018/target/scala-2.12/classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.1.1:compile for Scala 2.12.5[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.1.1:compile for Scala 2.12.5[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 2bafb2d7 for Scala compiler version 2.12.5[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/usr/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes:/home/andres/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.5.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/home/andres/IdeaProjects/introduccionscala052018/target/scala-2.12/classes:/home/andres/.ivy2/cache/org.typelevel/cats-core_2.12/jars/cats-core_2.12-0.8.1.jar:/home/andres/.ivy2/cache/org.typelevel/cats-macros_2.12/jars/cats-macros_2.12-0.8.1.jar:/home/andres/.ivy2/cache/com.github.mpilquist/simulacrum_2.12/jars/simulacrum_2.12-0.10.0.jar:/home/andres/.ivy2/cache/org.typelevel/macro-compat_2.12/jars/macro-compat_2.12-1.1.1.jar:/home/andres/.ivy2/cache/org.typelevel/machinist_2.12/jars/machinist_2.12-0.6.1.jar:/home/andres/.ivy2/cache/org.scala-lang/scala-reflect/jars/scala-reflect-2.12.5.jar:/home/andres/.ivy2/cache/org.typelevel/cats-kernel_2.12/jars/cats-kernel_2.12-0.8.1.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 1.868692353 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Monads.MonadInstances.optMonad...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Monads.MonadInstances.optMonad)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Monads.MonadInstances.optMonad)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Monads.MonadInstances.optMonad,ModifiedNames(changes = UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(optMonad,[Implicit]), UsedName(eq,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(pure,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName($isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(isInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(clone,[Default]), UsedName(flatMap,[Default]))) invalidates 1 classes due to The example.Monads.MonadInstances.optMonad has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(optMonad,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Monads.MonadInstances.optMonad)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Monads.MonadInstances.MonadLaws...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Monads.MonadInstances.MonadLaws)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Monads.MonadInstances.MonadLaws)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Monads.MonadInstances.MonadLaws,ModifiedNames(changes = UsedName(wait,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(leftIdentify,[Default]), UsedName(toString,[Default]), UsedName(associativityIdentity,[Default]), UsedName(notifyAll,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(MonadLaws,[Default]), UsedName($isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(rightIdentity,[Default]), UsedName(f,[Default]), UsedName(getClass,[Default]), UsedName(g,[Default]), UsedName(isInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(clone,[Default]))) invalidates 1 classes due to The example.Monads.MonadInstances.MonadLaws has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(wait,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(leftIdentify,[Default]), UsedName(toString,[Default]), UsedName(associativityIdentity,[Default]), UsedName(notifyAll,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(MonadLaws,[Default]), UsedName($isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(rightIdentity,[Default]), UsedName(f,[Default]), UsedName(getClass,[Default]), UsedName(g,[Default]), UsedName(isInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(clone,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Monads.MonadInstances.MonadLaws)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Monads.MonadInstances.tryMonad...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Monads.MonadInstances.tryMonad)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Monads.MonadInstances.tryMonad)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Monads.MonadInstances.tryMonad,ModifiedNames(changes = UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(pure,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName($isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(isInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(ne,[Default]), UsedName(tryMonad,[Implicit]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(clone,[Default]), UsedName(flatMap,[Default]))) invalidates 1 classes due to The example.Monads.MonadInstances.tryMonad has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(tryMonad,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Monads.MonadInstances.tryMonad)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Monads.MonadInstances.eitherMonad...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Monads.MonadInstances.eitherMonad)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Monads.MonadInstances.eitherMonad)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Monads.MonadInstances.eitherMonad,ModifiedNames(changes = UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(pure,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(eitherMonad,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(isInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(clone,[Default]), UsedName(flatMap,[Default]))) invalidates 1 classes due to The example.Monads.MonadInstances.eitherMonad has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eitherMonad,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Monads.MonadInstances.eitherMonad)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Monads...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Monads)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Monads)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Monads,ModifiedNames(changes = UsedName(MonadInstances,[Default]))) invalidates 1 classes due to The example.Monads has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(MonadInstances,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Monads)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Monads.MonadInstances...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(example.Monads.MonadInstances)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Monads.MonadInstances)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Monads.MonadInstances,ModifiedNames(changes = UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(optMonad,[Implicit]), UsedName(eq,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(either,[Default]), UsedName(==,[Default]), UsedName(eitherMonad,[Implicit]), UsedName(MonadLaws,[Default]), UsedName($isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(MonadInstances,[Default]), UsedName(getClass,[Default]), UsedName(isInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(ne,[Default]), UsedName(tryMonad,[Implicit]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(clone,[Default]))) invalidates 1 classes due to The example.Monads.MonadInstances has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(optMonad,[Implicit]), UsedName(eitherMonad,[Implicit]), UsedName(tryMonad,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(example.Monads.MonadInstances)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
